#!/usr/bin/env python3

# patchtest-poll-events: Poll events of type --series-new-revision from patchwork
#                        and return these as a series/revision list.
#
# Copyright (C) 2016 Intel Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

import sys
import os
import argparse
import json
import subprocess


def pollseries(repodir, pwproject, since):
    listseriesrev = list()
    events = str()
    cmd = "cd %s;git pw poll-events --name series-new-revision" % repodir

    if since:
        cmd += " --since %s" % since
        events = subprocess.check_output(cmd, shell=True, universal_newlines=True)
    else:
        timestamp = ".git-pw.%s.poll.timestamp" % pwproject
        if os.path.exists(os.path.join(repodir, timestamp)):
            events = subprocess.check_output(cmd, shell=True, universal_newlines=True)
        else:
            # just consume all events
            while subprocess.check_output(cmd, shell=True, universal_newlines=True):
                pass

    for event in events.splitlines():
        series = json.loads(event)
        listseriesrev.append((series["series"], series["parameters"]["revision"]))

    return " ".join([".".join([str(s), str(r)]) for s, r in listseriesrev])


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="""
Poll series and return these as a list of series.revision. If since is not present,
it will look into the .git-pw and take possible timestamp from it. If the latter
file is not present, *all* events are polled and *no* series are printed."""
    )

    parser.add_argument("repodir", help="Repository where polling is done")

    parser.add_argument(
        "since", nargs="?", default=None, help="Poll events since the given timestamp"
    )

    parser.add_argument(
        "--project", dest="project", default="oe-core", help="Patchwork's project name"
    )

    args = parser.parse_args()

    ret = 1
    try:
        print(pollseries(args.repodir, args.project, args.since))
        ret = 0
    except subprocess.CalledProcessError as cpe:
        print("make sure you have patchwork git-pw installed")
    except:
        import traceback

        traceback.print_exc(5)

    sys.exit(ret)
