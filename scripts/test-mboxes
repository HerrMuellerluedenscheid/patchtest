#!/bin/bash -u
# ex:ts=4:sw=4:sts=4:et
# -*- tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*-
#
# test-mboxes: Test the provided mboxes and if required. Results
#              can be either stored in the defined output directory
#              and/or assemble those series that can be merged
#              into a branch with results as git-notes
#
# Copyright (C) 2016 Intel Corporation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# default values
verbose=''
repodir=''
mboxpath=''
startdir=''
assemblebranch=''
startpoint='HEAD'
outputdir='.'
mergeall=''

function usage() {
    CMD="$(basename $0)"
    cat << EOF
\$ $CMD -r OPTIONS INPUT

where OPTIONS are

    -r <repodir>         : Repository
    -s <startdir>        : Start directory for test discovery
    -m <mbox or mbox dir>: Filepath poiting to a single mbox or a directory
    -p <start point>     : Start point for assemble branch. Defaults to $startpoint
    -a <assemble branch> : Branch name to assemble patches (that can be merged), including results as git-notes
    -A                   : Merge the mboxes on <assemble branch> no matter if some tests have failed. By default merge is only
                           on mboxes that have passed all tests (skips are not considered)
    -o <outputdir>       : Folder to be used to output (patchtest) results and logs for each tested series.

The paramter -m can either point to sigle mbox or directory containing multiple mboxes. Extra parameters for patchtest can be provided after double dashes:

    $CMD -r /home/user/poky -s /home/user/patchtest-oe/tests patch.mbox -- --pattern test_mbox_merge.py

EOF
>&2
    exit 1
}

function gitnotes() {
    git notes --ref=patchtest-results add -m "$PTRESULTS" HEAD
    git notes --ref=patchtest-log add -m "$PTLOG" HEAD
}

function testpatch() {
    local patch="$1"
    local extraptargs="$2"

    # get current branch
    CURRENTB="$(cd $repodir; git rev-parse --abbrev-ref HEAD)"

    # create assemblebrach if it does not exist
    if [ -n "$assemblebranch" ]; then
	test "$assemblebranch" = "$CURRENTB" && { echo "The assemble branch must be different that current one"; exit 1; }
	( cd $repodir
	  git show-ref --verify --quiet refs/heads/$assemblebranch || \
	      { git branch $assemblebranch $startpoint; }
	)
    fi

    echo -e "${patch}"

    tmp="$(mktemp)"

    patchfn=$(basename $patch)

    # run patchtest
    PTRESULTS="$(patchtest $patch $repodir $startdir $extraptargs --json 2>$tmp)"

    # store stdout/stderr and return if there was an error on pt execution
    if [ $? -ne 0 ]; then
	echo "$PTRESULTS" > "$outputdir/$patchfn.stderr"
	cat $tmp >> "$outputdir/$patchfn.stderr"
	rm $tmp
	return
    fi
       
    PTLOG="$(cat $tmp)"
    rm $tmp

    # store log
    if [ -n "$outputdir" ]; then
	echo "$PTRESULTS" > "$outputdir/$patchfn.json"
	echo "$PTLOG" > "$outputdir/$patchfn.log"
    fi

    if [ -n "$assemblebranch" ]; then
	# if assemble branch give, try to assemble as many as possible

	(
	    cd $repodir

	    # move the assemblebranch, already created above
	    git checkout $assemblebranch --quiet

	    # try patch merge
	    if git apply --check $patch 2> /dev/null; then
		if [ -n "$mergeall" ]; then
		    git am --quiet --keep-cr $patch 2>/dev/null && gitnotes
		    echo -e "\tPatch merged into '${assemblebranch}' including all test results"
		else
		    if [ "$(echo "$PTRESULTS" | any-fail)" == "yes" ]; then
			echo -e "\tPatch has test failures, skipping"
		    else
			git am --quiet --keep-cr $patch 2>/dev/null && gitnotes
			echo -e "\tPatch merged into '${assemblebranch}' with no test failures"
		    fi
		fi
	    else
		echo -e "\tNot merged due to a merge-conflict"
	    fi

	    git checkout $CURRENTB --quiet
	)
    fi

    # just print the results either when verbose or when no outputdir/assemblebranch given
    if [ -n "$verbose"  -o -z "$outputdir" -a -z "$assemblebranch" ]; then
	echo -e "$PTLOG"
	echo -e "$PTRESULTS"
    fi

    echo -e ""
}

while getopts ":r:s:m:p:a:o:vAh" opt; do
    case $opt in
	r)
	    repodir=$OPTARG
	    ;;
	s)
	    startdir=$OPTARG
	    ;;
	m)
	    mboxpath=$OPTARG
	    ;;
	p)
	    startpoint=$OPTARG
	    ;;
	a)
	    assemblebranch=$OPTARG
	    ;;
	o)
	    outputdir=$OPTARG
	    ;;
	v)
	    verbose='x'
	    ;;
	A)
	    mergeall='x'
	    ;;
	h)
	    usage
	    ;;
	\?)
	    echo "Invalid option: -$OPTARG" >&2
	    usage
	    ;;
	:)
	    echo "Option -$OPTARG requires an argument." >&2
	    usage
	    ;;
	--)
	    shift
	    break
	    ;;

    esac
done
shift $((OPTIND-1))

extraopts="$@"

# Checks
test -z "$repodir"  && { echo "Indicate the repository"; usage; }
test ! -d $repodir  && { echo "Repository does not exit"; usage; }
test -z "$mboxpath" && { echo "Provide either an mbox for a directory containing mboxes"; usage; }
test ! -d $startdir && { echo "Test suite starting directory does not exist"; usage; }

# if outputdir does not exit, create it
test -n "$outputdir" && { test ! -d "$outputdir" && { mkdir -p "$outputdir"; }; }

for item in "$mboxpath"; do
    # if item is a directory, get all files and test each
    if [ -d $item ]; then
	for patch in $(find $item -type f -print0 | xargs -r0 stat -c %y\ %n | sort | cut -d' ' -f4); do
	    testpatch $patch "$extraopts"
	done
    else
	testpatch $item "$extraopts"
    fi
done
